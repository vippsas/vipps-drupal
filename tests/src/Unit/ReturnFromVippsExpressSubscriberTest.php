<?php

namespace Drupal\Tests\commerce_vipps\Unit;

use Drupal\commerce_order\Entity\OrderInterface;
use Drupal\commerce_payment\Entity\PaymentInterface;
use Drupal\commerce_price\Price;
use Drupal\commerce_shipping\PackerManagerInterface;
use Drupal\commerce_vipps\EventSubscriber\CommerceShippingSubscriber;
use Drupal\commerce_vipps\EventSubscriber\ReturnFromVippsExpressSubscriber;
use Drupal\Core\Entity\EntityTypeManagerInterface;
use Drupal\Tests\UnitTestCase;
use zaporylie\Vipps\Model\Payment\ResponseGetPaymentDetails;
use zaporylie\Vipps\Model\Payment\TransactionSummary;

/**
 * Class ReturnFromVippsExpressSubscriberTest
 *
 * @package Drupal\Tests\commerce_vipps\Unit
 * @coversDefaultClass \Drupal\commerce_vipps\EventSubscriber\ReturnFromVippsExpressSubscriber
 * @group commerce_vipps
 */
class ReturnFromVippsExpressSubscriberTest extends UnitTestCase {

  /**
   * @var \Drupal\commerce_vipps\EventSubscriber\ReturnFromVippsExpressSubscriber
   */
  protected $subscriber;

  /**
   * {@inheritdoc}
   */
  protected function setUp() {
    parent::setUp(); // TODO: Change the autogenerated stub
    $etm = $this->prophesize(EntityTypeManagerInterface::class);;
    $this->subscriber = new ReturnFromVippsExpressSubscriber(
      $etm->reveal()
    );
  }

  /**
   * @dataProvider provideTestPrices
   */
  public function testGetAmendedPrice($expected, $captured, $remaining) {
    $amount = $this->getPayment(['amount' => new Price($expected, 'NOK')])->getAmount();
    $this->assertEquals($amount, $this->subscriber->getAmendedPrice($this->getDetails(['transactionSummary' => ['capturedAmount' => $captured, 'remainingAmountToCapture' => $remaining]]), $amount));
  }

  /**
   * @return array
   */
  public function provideTestPrices() {
    return [
      'one-krone' => ['1', '100', '0'],
      'one-Ã¸re' => ['0.01', '1', '0'],
    ];
  }

  /**
   * @param array $values
   *
   * @return \Drupal\commerce_payment\Entity\PaymentInterface
   */
  protected function getPayment($values = []) {
    $values += ['amount' => new Price(0, 'NOK')];
    $payment = $this->getMockBuilder(PaymentInterface::class)->getMock();
    $payment->expects($this->any())->method('getAmount')->willReturn($values['amount']);
    $payment->expects($this->any())->method('setAmount')->willReturn($this->returnSelf());
    return $payment;
  }

  /**
   * @param array $values
   *
   * @return object
   */
  protected function getOrder($values = []) {
    $payment = $this->prophesize(OrderInterface::class);
    return $payment->reveal();
  }

  /**
   * @param array $values
   *
   * @return \zaporylie\Vipps\Model\Payment\ResponseGetPaymentDetails
   * @throws \ReflectionException
   */
  protected function getDetails($values = []) {
    $values = array_replace_recursive(['transactionSummary' => ['capturedAmount' => 0, 'remainingAmountToCapture' => 0]], $values);
    $summary = new TransactionSummary();
    $summaryReflection = new \ReflectionObject($summary);
    $capturedAmountPropertyReflection = $summaryReflection->getProperty('capturedAmount');
    $capturedAmountPropertyReflection->setAccessible(true);
    $capturedAmountPropertyReflection->setValue($summary, $values['transactionSummary']['capturedAmount']);
    $remainingAmountToCapturePropertyReflection = $summaryReflection->getProperty('remainingAmountToCapture');
    $remainingAmountToCapturePropertyReflection->setAccessible(true);
    $remainingAmountToCapturePropertyReflection->setValue($summary, $values['transactionSummary']['remainingAmountToCapture']);
    $details = new ResponseGetPaymentDetails();
    $detailsReflection = new \ReflectionObject($details);
    $transactionSummaryPropertyReflection = $detailsReflection->getProperty('transactionSummary');
    $transactionSummaryPropertyReflection->setAccessible(true);
    $transactionSummaryPropertyReflection->setValue($details, $summary);
    return $details;
  }

}
