<?php

/**
 * @file
 * Generic hooks implementations.
 */

define('COMMERCE_VIPPS_REMOTE_INITIATE', 'INITIATE');
define('COMMERCE_VIPPS_REMOTE_RESERVED', 'RESERVE');

/**
 * Implements hook_menu().
 */
function commerce_vipps_menu() {
  $items['admin/commerce/orders/%commerce_order/payment/%commerce_payment_transaction/commerce-vipps/cancel'] = array(
    'title' => 'Cancel',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_vipps_admin_cancel', 5, 3),
    'access callback' => 'commerce_vipps_access_callback',
    'access arguments' => array('cancel', 5, 3),
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'type' => MENU_LOCAL_ACTION,
    'file' => 'commerce_vipps.admin.inc',
  );
  $items['admin/commerce/orders/%commerce_order/payment/%commerce_payment_transaction/commerce-vipps/capture'] = array(
    'title' => 'Capture',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_vipps_admin_capture', 5, 3),
    'access callback' => 'commerce_vipps_access_callback',
    'access arguments' => array('capture', 5, 3),
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'type' => MENU_LOCAL_ACTION,
    'file' => 'commerce_vipps.admin.inc',
  );
  $items['admin/commerce/orders/%commerce_order/payment/%commerce_payment_transaction/commerce-vipps/credit'] = array(
    'title' => 'Credit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_vipps_admin_credit', 5, 3),
    'access callback' => 'commerce_vipps_access_callback',
    'access arguments' => array('credit', 5, 3),
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'type' => MENU_LOCAL_ACTION,
    'file' => 'commerce_vipps.admin.inc',
  );
  $items['admin/commerce/orders/%commerce_order/payment/%commerce_payment_transaction/commerce-vipps/get'] = array(
    'title' => 'Sync',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_vipps_admin_get', 5, 3),
    'access callback' => 'commerce_vipps_access_callback',
    'access arguments' => array('get', 5, 3),
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'type' => MENU_LOCAL_ACTION,
    'file' => 'commerce_vipps.admin.inc',
  );

  // Checkout transaction "spinner" page.
  // @todo: Check access!
  $items['checkout/%commerce_order/commerce_vipps/%'] = array(
    'page callback' => 'commerce_vipps_checkout_page',
    'page arguments' => array(1, 3),
    'access arguments' => array('access checkout'),
    'type' => MENU_CALLBACK,
    'file' => 'commerce_vipps.inc',
  );
  // Push callback.
  $items['commerce_vipps/%commerce_payment_transaction/transaction/%'] = array(
    'page callback' => 'commerce_vipps_push_callback',
    'page arguments' => array(1, 3),
    'access arguments'=> array('access content'),
    'delivery callback' => 'commerce_vipps_api_delivery',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Access callback.
 */
function commerce_vipps_access_callback($op, $transaction, $order) {
  switch ($op) {
    case 'capture':
      return $transaction->status == COMMERCE_PAYMENT_STATUS_PENDING && commerce_payment_transaction_access('update', $transaction);

    case 'cancel':
      return $transaction->status == COMMERCE_PAYMENT_STATUS_PENDING && commerce_payment_transaction_access('update', $transaction);

    case 'credit':
      return $transaction->status == COMMERCE_PAYMENT_STATUS_SUCCESS && commerce_payment_transaction_access('update', $transaction);

    case 'get':
      return commerce_payment_transaction_access('update', $transaction);

    default:
      return FALSE;
  }
}

/**
 * Implements hook_theme().
 */
function commerce_vipps_theme($existing, $type, $theme, $path) {
  return array(
    'page__commerce_vipps' => array(
      'template' => 'page--commerce-vipps',
      'path' => $path . '/theme',
      'render element' => 'page',
    ),
  );
}

/**
 * Implements hook_preprocess_HOOK().
 */
function commerce_vipps_preprocess_page(&$variables) {
  if (drupal_match_path($_GET['q'], 'checkout/*/commerce_vipps/*')) {
    $variables['theme_hook_suggestions'][] = 'page__commerce_vipps';
  }
}

/**
 * @param $result
 * @throws \Exception
 */
function commerce_vipps_api_delivery($result) {
  if (is_int($result)) {
    switch ($result) {
      case MENU_NOT_FOUND:
        // Print a 404 page.
        drupal_add_http_header('Status', '404 Not Found');
        $result = 'error';
        break;

      case MENU_ACCESS_DENIED:
        // Print a 403 page.
        drupal_add_http_header('Status', '403 Forbidden');
        $result = 'error';
        break;

      case MENU_SITE_OFFLINE:
        // Print a 503 page.
        drupal_maintenance_theme();
        drupal_add_http_header('Status', '503 Service unavailable');
        drupal_set_title(t('Site under maintenance'));
        print theme('maintenance_page', array(
          'content' => filter_xss_admin(variable_get('maintenance_mode_message',
            t('@site is currently under maintenance. We should be back shortly. Thank you for your patience.', array('@site' => variable_get('site_name', 'Drupal')))))
        ));
        break;
    }
  }
  drupal_json_output($result);
}

/**
 * @param $transaction
 * @param $payment_redirect_key
 * @return int
 */
function commerce_vipps_push_callback($transaction, $payment_redirect_key) {
  $order = commerce_order_load($transaction->order_id);
  // Doesn't match.
  if ($order->data['payment_redirect_key'] !== $payment_redirect_key) {
    return MENU_NOT_FOUND;
  }
  // Load .inc.
  module_load_include('inc', 'commerce_vipps');
  // Check payment status.
  _commerce_vipps_get_status_transaction($transaction);
  // Compare payment status.
  if ($transaction->remote_status !== COMMERCE_VIPPS_REMOTE_RESERVED) {
    return MENU_NOT_FOUND;
  }
  // Get details.
  _commerce_vipps_get_details_transaction($transaction);
  // Save in transaction.
  commerce_payment_transaction_save($transaction);
  // Return 200.
  return 'ok';
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_vipps_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['commerce_vipps'] = array(
    'title' => t('VIPPS by DNB'),
    'description' => t('Collect payment with VIPPS.'),

    'short_title' => t('VIPPS by DNB'),

    // Start as enabled.
    'active' => TRUE,

    // Disable payments in orderâ€™s Payment tab.
    'terminal' => FALSE,

    // Sends user offsite.
    'offsite' => TRUE,

    // Automaticly redirect user offsite.
    'offsite_autoredirect' => TRUE,

    // File to be included.
    'file' => 'commerce_vipps.inc',
  );

  return $payment_methods;
}

/**
 * Form element validation handler for file elements.
 */
function commerce_vipps_element_validate_file($element, &$form_state) {
  $value = $element['#value'];
  list ($path, $password) = explode(':', $value);
  if (!empty($path) && !file_exists($path)) {
    form_error($element, t('%name must be an existing file.', array('%name' => $element['#title'])));
  }
}
